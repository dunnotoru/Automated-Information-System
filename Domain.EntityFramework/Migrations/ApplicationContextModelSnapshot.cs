// <auto-generated />
using System;
using Domain.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.EntityFramework.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("Domain.EntityFramework.Configurations.StationRoute", b =>
                {
                    b.Property<int>("RouteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("RouteId", "StationId");

                    b.HasIndex("StationId");

                    b.ToTable("StationRoute");
                });

            modelBuilder.Entity("Domain.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Domain.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DriverClass")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DriverLicenseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmploymentBookDetails")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PayrollNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfessionalStandardDetails")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("RunId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmploymentBookDetails")
                        .IsUnique();

                    b.HasIndex("PayrollNumber")
                        .IsUnique();

                    b.HasIndex("RunId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("Domain.Models.DriverLicense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfExpiration")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("TEXT");

                    b.Property<int>("DriverId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DriverId")
                        .IsUnique();

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("Domain.Models.Freighter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Freighters");
                });

            modelBuilder.Entity("Domain.Models.IdentityDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("Series")
                        .IsUnique();

                    b.ToTable("Passports");
                });

            modelBuilder.Entity("Domain.Models.LicenseCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DriverLicenseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CategoryId", "DriverLicenseId");

                    b.HasIndex("DriverLicenseId");

                    b.ToTable("LicenseCategory");
                });

            modelBuilder.Entity("Domain.Models.RepairType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RepairTypes");
                });

            modelBuilder.Entity("Domain.Models.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("Domain.Models.Run", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DepartureDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EstimatedArrivalDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RouteId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VehicleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("RouteId");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("Runs");
                });

            modelBuilder.Entity("Domain.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PeriodInMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RouteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RunId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("RunId")
                        .IsUnique();

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Domain.Models.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("Domain.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BookDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cashier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("IdentityDocumentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RunId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TicketTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IdentityDocumentId");

                    b.HasIndex("RunId");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Domain.Models.TicketType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PriceModifierInPercent")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TicketTypes");
                });

            modelBuilder.Entity("Domain.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FreighterId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InsuranceDetails")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastRepair")
                        .HasColumnType("TEXT");

                    b.Property<string>("LicensePlateNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Manufacture")
                        .HasColumnType("TEXT");

                    b.Property<int>("Mileage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Photography")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RepairTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RunId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VehicleModelId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FreighterId");

                    b.HasIndex("LicensePlateNumber")
                        .IsUnique();

                    b.HasIndex("VehicleModelId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Domain.Models.VehicleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BrandId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("VehicleModels");
                });

            modelBuilder.Entity("Domain.EntityFramework.Configurations.StationRoute", b =>
                {
                    b.HasOne("Domain.Models.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Domain.Models.Driver", b =>
                {
                    b.HasOne("Domain.Models.Run", "Run")
                        .WithMany("Drivers")
                        .HasForeignKey("RunId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Run");
                });

            modelBuilder.Entity("Domain.Models.DriverLicense", b =>
                {
                    b.HasOne("Domain.Models.Driver", "Driver")
                        .WithOne("DriverLicense")
                        .HasForeignKey("Domain.Models.DriverLicense", "DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Domain.Models.LicenseCategory", b =>
                {
                    b.HasOne("Domain.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.DriverLicense", "DriverLicense")
                        .WithMany()
                        .HasForeignKey("DriverLicenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("DriverLicense");
                });

            modelBuilder.Entity("Domain.Models.Run", b =>
                {
                    b.HasOne("Domain.Models.Route", "Route")
                        .WithMany("Runs")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.Vehicle", "Vehicle")
                        .WithOne("Run")
                        .HasForeignKey("Domain.Models.Run", "VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Domain.Models.Schedule", b =>
                {
                    b.HasOne("Domain.Models.Route", "Route")
                        .WithMany("Schedules")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Run", "Run")
                        .WithOne("Schedule")
                        .HasForeignKey("Domain.Models.Schedule", "RunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("Run");
                });

            modelBuilder.Entity("Domain.Models.Ticket", b =>
                {
                    b.HasOne("Domain.Models.IdentityDocument", "IdentityDocument")
                        .WithMany()
                        .HasForeignKey("IdentityDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Run", "Run")
                        .WithMany()
                        .HasForeignKey("RunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.TicketType", "TicketType")
                        .WithMany()
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityDocument");

                    b.Navigation("Run");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("Domain.Models.Vehicle", b =>
                {
                    b.HasOne("Domain.Models.Freighter", "Freighter")
                        .WithMany("Vehicles")
                        .HasForeignKey("FreighterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.RepairType", "RepairType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.VehicleModel", "VehicleModel")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freighter");

                    b.Navigation("RepairType");

                    b.Navigation("VehicleModel");
                });

            modelBuilder.Entity("Domain.Models.VehicleModel", b =>
                {
                    b.HasOne("Domain.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Domain.Models.Driver", b =>
                {
                    b.Navigation("DriverLicense")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Freighter", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Domain.Models.RepairType", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Domain.Models.Route", b =>
                {
                    b.Navigation("Runs");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Domain.Models.Run", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Domain.Models.Vehicle", b =>
                {
                    b.Navigation("Run");
                });

            modelBuilder.Entity("Domain.Models.VehicleModel", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
